<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backsided&#39;s Blog</title>
    <link>https://backsided.github.io/</link>
    <description>Recent content on Backsided&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Oct 2020 10:53:44 +0800</lastBuildDate><atom:link href="https://backsided.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Markdown Cheatsheet</title>
      <link>https://backsided.github.io/2020/10/26/markdown-cheatsheet/</link>
      <pubDate>Mon, 26 Oct 2020 10:53:44 +0800</pubDate>
      
      <guid>https://backsided.github.io/2020/10/26/markdown-cheatsheet/</guid>
      <description>[TOC]
1. 斜体和粗体 *斜体* 或 _斜体_ **粗体** ***加粗斜体*** ~~删除线~~ 斜体 或 斜体
粗体
加粗斜体
删除线
 2. 分级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 [TOC]会自动添加各级标题形成目录，故演示略。
 3. 超链接 3.1. 行内式 语法说明：[链接文字](链接地址 链接属性(可选))
[Backsided&amp;#39;s Blog](https://backsided.github.io/) [Backsided&amp;#39;s Blog](https://backsided.github.io/ &amp;#34;Backsided&amp;#39;s Blog&amp;#34;) Backsided&amp;rsquo;s Blog
Backsided&amp;rsquo;s Blog
3.2. 参考式 语法说明： 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。
如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。
百度[Baidu][1]、[Backsided&amp;#39;s Blog][2]、[Backsided&amp;#39;s Blog][] [1]:https://www.baidu.com [2]:https://backsided.github.io/ &amp;#34;Backsided&amp;#39;s Blog&amp;#34; [Backsided&amp;#39;s Blog]:https://backsided.github.io/ 百度Baidu、Backsided&amp;rsquo;s Blog、Backsided&amp;rsquo;s Blog
3.3. 自动链接 语法说明： Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&amp;lt;&amp;gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://backsided.github.io/2020/10/26/test/</link>
      <pubDate>Mon, 26 Oct 2020 10:22:47 +0800</pubDate>
      
      <guid>https://backsided.github.io/2020/10/26/test/</guid>
      <description>This blog is only for test </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://backsided.github.io/page/about/</link>
      <pubDate>Fri, 03 Apr 2015 02:13:50 +0000</pubDate>
      
      <guid>https://backsided.github.io/page/about/</guid>
      <description>About Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean nec dolor in magna lobortis egestas. Suspendisse eu erat tempor, tristique neque eu, convallis nulla. Curabitur vel bibendum lacus, at semper mauris. Suspendisse aliquet commodo ex, sed sagittis metus aliquam id. Maecenas feugiat rutrum lorem vel imperdiet. Nullam ornare lectus ut enim finibus, et porttitor mi tincidunt. Aenean lacinia, leo quis vehicula eleifend, quam libero sagittis erat, at euismod augue mauris et sapien.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://backsided.github.io/page/contact/</link>
      <pubDate>Fri, 03 Apr 2015 02:13:50 +0000</pubDate>
      
      <guid>https://backsided.github.io/page/contact/</guid>
      <description>Contact Aenean ipsum justo, semper eu nisl ut, pretium tincidunt sem. Praesent et diam sit amet lacus lobortis dictum a id lacus. Quisque hendrerit sit amet turpis eu varius. Ut id lorem ac felis ultrices tincidunt. Pellentesque consequat arcu ac fringilla imperdiet. Phasellus pellentesque, sapien non pulvinar blandit, sapien ante aliquet felis, vel porttitor sapien ante in lacus. Fusce non urna aliquet, malesuada nibh vel, luctus urna. Phasellus ut lacus molestie, varius purus quis, malesuada lorem.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://backsided.github.io/2014/09/28/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 02:13:50 +0000</pubDate>
      
      <guid>https://backsided.github.io/2014/09/28/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://backsided.github.io/2014/04/02/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 02:13:50 +0000</pubDate>
      
      <guid>https://backsided.github.io/2014/04/02/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Migrating from Jekyll</title>
      <link>https://backsided.github.io/2014/04/02/migrate-from-jekyll/</link>
      <pubDate>Wed, 02 Apr 2014 02:13:50 +0000</pubDate>
      
      <guid>https://backsided.github.io/2014/04/02/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>
